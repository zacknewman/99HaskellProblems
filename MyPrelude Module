{- |
Module      : MyPrelude
Description : Functions that are used in the NinetyNineProblems module.
Copyright   : (c) Zack Newman
License     :

Maintainer  : zacknewman22@gmail.com
Stability   : stable
Portability : portable

The MyPrelude module contains some of the fundamental functions that are
used in the NinetyNineProblems module which in turn answers the
H-99: Ninety-Nine Haskell Problems.
-}

module MyPrelude where

-- |The myFoldl function composes a function left-associatively on an
-- initializer element and a list returning a single value.
myFoldl           :: (a -> b -> a) -> a -> [b] -> a
myFoldl _ n []     = n
myFoldl f n (x:xs) = myFoldl f (f n x) xs

-- |The myFoldl1 function is the same as the "myFoldl" function except
-- it doesn't require an initializer element but instead uses the first
-- element of the non-empty list as the initializer.
myFoldl1         :: (a -> a -> a) -> [a] -> a
myFoldl1 _ []     = error "List must not be empty."
myFoldl1 f (x:xs) = myFoldl f x xs

-- |The myFoldr function composes a function right-associatively on an
-- initializer element and a list returning a single value.
myFoldr           :: (a -> b -> b) -> b -> [a] -> b
myFoldr _ n []     = n
myFoldr f n (x:xs) = f x . myFoldr f n $ xs

-- |The (+++) function concatenates two lists of the same type.
infixr 5 +++
(+++)          :: [a] -> [a] -> [a]
(+++) xs ys     = myFoldr (:) ys xs

-- |The myInit function returns a list containing all but the last element
-- of a non-empty list.
myInit   :: [a] -> [a]
myInit [] = error "List must not be empty."
myInit xs = myInit' xs []
    where myInit' [] acc     = acc
          myInit' [_] acc    = acc
          myInit' (y:ys) acc = myInit' ys (acc +++ [y])

-- |The myHead function returns the first element of a non-empty list.
myHead      :: [a] -> a
myHead []    = error "List must not be empty"
myHead (x:_) = x

-- |The myTake function returns the first inputted number of elements
-- from the inputted list. If the inputted number exceeds the total number
-- of elements of the list, then the original list is returned.
myTake     :: Int -> [a] -> [a]
myTake 0 xs = []
myTake n xs = myFoldr (\ y ys-> y:myTake (n - 1) ys) [] xs

-- |The myRepeat function returns the infinite list of the inputted argument.
myRepeat  :: a -> [a]
myRepeat x = x:myRepeat x

-- |The myDrop function drops the first inputted number of elements
-- from a list.
myDrop         :: Int -> [a] -> [a]
myDrop _ []     = []
myDrop 0 xs     = xs
myDrop n (x:xs) = myDrop (n - 1) xs

-- |The myTail function returns all but the first element of a list.
myTail       :: [a] -> [a]
myTail []     = error "List must not be empty."
myTail (x:xs) = xs
